{"version":3,"sources":["img/logo.png","img/Gooey.svg","components/Navbar.jsx","components/UserMessageDiv.jsx","components/BottomNavbar.jsx","components/Background.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","icon","React","createRef","topnav","className","id","ref","href","style","margin","padding","src","logo","maxWidth","alt","onClick","current","float","background","color","UserMessageDiv","fontSize","BottomNavbar","Gooey","Background","props","children","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,+KCIpC,SAASC,IAGZ,IAAIC,EAAOC,IAAMC,YACbC,EAASF,IAAMC,YAcnB,OACI,yBAAKE,UAAU,SAASC,GAAG,WAAWC,IAAKH,GACvC,uBAAGI,KAAK,IAAIH,UAAU,UAAtB,QACA,uBAAGG,KAAK,KAAR,UACA,uBAAGA,KAAK,KAAR,UACA,uBAAGA,KAAK,KAAR,SACA,uBAAGA,KAAK,IAAIC,MAAO,CAAEC,OAAQ,IAAKC,QAAS,MACvC,yBAAKC,IAAKC,IAAMJ,MAAO,CAAEK,SAAU,QAASH,QAAS,IAAKD,OAAQ,KAAOK,IAAI,UAGjF,uBAAGV,UAAU,OAAOE,IAAKN,EAAMe,QAtBvC,WAIsB,WAFFZ,EAAOa,QAAQZ,UAG3BD,EAAOa,QAAQZ,WAAa,YAE5BD,EAAOa,QAAQZ,UAAY,WAgBvB,6BAAM,oCAEV,uBAAGG,KAAK,IAAIC,MAAO,CAAES,MAAO,QAASC,WAAY,OAAQC,MAAO,YAAhE,kBCjCL,SAASC,IACZ,OACI,yBAAKf,GAAG,oBACJ,uBAAGG,MAAO,CAAEW,MAAO,OAAQE,SAAU,SAArC,kE,oBCFL,SAASC,IACZ,OACI,yBAAKlB,UAAU,YAAYC,GAAG,aAG1B,yBAAKD,UAAU,QAAQO,IAAKY,IAAOT,IAAI,UAEvC,yBAAKV,UAAU,gBAAgBC,GAAG,iBAAlC,qKCRL,SAASmB,EAAWC,GACvB,OACI,yBAAKrB,UAAU,aACX,yBAAKA,UAAU,yBACdqB,EAAMC,WCEJ,SAASC,IACtB,OACE,kBAAC,IAAMC,SAAP,KAEE,kBAACJ,EAAD,KACE,kBAACzB,EAAD,MACA,kBAACqB,EAAD,MACA,kBAACE,EAAD,QCHYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACT,EAAD,OAEFU,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09695b13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7857cab8.png\";","module.exports = __webpack_public_path__ + \"static/media/Gooey.2cdb76e5.svg\";","import React from 'react';\r\nimport logo from '../img/logo.png';\r\n\r\n\r\nexport function Navbar() {\r\n\r\n\r\n    let icon = React.createRef();\r\n    let topnav = React.createRef();\r\n\r\n    function NavBarResponsive() {\r\n\r\n        var classname = topnav.current.className;\r\n\r\n        if (classname === \"topnav\") {\r\n            topnav.current.className += \" showmenu\";\r\n        } else {\r\n            topnav.current.className = \"topnav\";\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"topnav\" id=\"myTopnav\" ref={topnav}>\r\n            <a href=\"/\" className=\"active\">Home</a>\r\n            <a href=\"/\" >Link 1</a>\r\n            <a href=\"/\" >Link 2</a>\r\n            <a href=\"/\" >About</a>\r\n            <a href=\"/\" style={{ margin: \"0\", padding: \"0\" }}>\r\n                <img src={logo} style={{ maxWidth: \"220px\", padding: \"0\", margin: \"0\" }} alt=\"logo\"></img>\r\n            </a>\r\n\r\n            <a className=\"icon\" ref={icon} onClick={NavBarResponsive}>\r\n                <div ><b>|||</b></div>\r\n            </a>\r\n            <a href=\"/\" style={{ float: \"right\", background: \"#fff\", color: \"#000000\" }}>Start Journey</a>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport function UserMessageDiv() {\r\n    return (\r\n        <div id=\"User-Message-Div\">\r\n            <p style={{ color: \"#fff\", fontSize: \"200%\" }}>\r\n                User image and scrollable chat content will be here..........\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Gooey from '../img/Gooey.svg'\r\n\r\nexport function BottomNavbar() {\r\n    return (\r\n        <div className=\"bottomNav\" id=\"bottomNav\" >\r\n\r\n\r\n            <img className=\"Gooey\" src={Gooey} alt=\"Gooey\"></img>\r\n\r\n            <div className=\"Gooey-Message\" id=\"Gooey-Message\">\r\n                Hey there, I am gooey! Welcome to Moving Blocks Tutorial Journey! \r\n                I will be guiding you through this Journey to know Moving Blocks & Terasology better_______ :)\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport function Background(props) {\r\n    return (\r\n        <div className=\"cover-img\">\r\n            <div className=\"container pruple-tint\">\r\n            {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './styles/index.css';\r\nimport { Navbar } from './components/Navbar';\r\nimport { UserMessageDiv } from './components/UserMessageDiv';\r\nimport { BottomNavbar } from './components/BottomNavbar';\r\nimport { Background } from './components/Background';\r\n\r\n\r\nexport default function App() {\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <Background>\r\n        <Navbar />\r\n        <UserMessageDiv />\r\n        <BottomNavbar />\r\n      </Background>\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}