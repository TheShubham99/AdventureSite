{"version":3,"sources":["img/logo.png","img/gooey.png","components/Navbar.jsx","components/UserMessageSection.jsx","components/BottomNavbar.jsx","components/Background.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","icon","React","createRef","topnav","className","id","ref","href","style","margin","padding","src","logo","maxWidth","alt","onClick","current","float","background","color","UserMessageSection","fontSize","BottomNavbar","gooey","Background","props","children","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,+KCGpC,SAASC,IACd,IAAIC,EAAOC,IAAMC,YACbC,EAASF,IAAMC,YAYnB,OACE,yBAAKE,UAAU,SAASC,GAAG,WAAWC,IAAKH,GACzC,uBAAGI,KAAK,IAAIH,UAAU,UAAtB,QAGA,uBAAGG,KAAK,KAAR,UACA,uBAAGA,KAAK,KAAR,UACA,uBAAGA,KAAK,KAAR,SACA,uBAAGA,KAAK,IAAIC,MAAO,CAAEC,OAAQ,IAAKC,QAAS,MACzC,yBACEC,IAAKC,IACLJ,MAAO,CAAEK,SAAU,QAASH,QAAS,IAAKD,OAAQ,KAClDK,IAAI,UAIR,uBAAGV,UAAU,OAAOE,IAAKN,EAAMe,QA1BnC,WAGoB,WAFFZ,EAAOa,QAAQZ,UAG7BD,EAAOa,QAAQZ,WAAa,YAE5BD,EAAOa,QAAQZ,UAAY,WAqBzB,6BACE,oCAGJ,uBACEG,KAAK,IACLC,MAAO,CAAES,MAAO,QAASC,WAAY,OAAQC,MAAO,YAFtD,kBCpCC,SAASC,IACd,OACE,yBAAKf,GAAG,wBACN,uBAAGG,MAAO,CAAEW,MAAO,OAAQE,SAAU,SAArC,kE,oBCFC,SAASC,IACd,OACE,yBAAKlB,UAAU,aAAaC,GAAG,cAC7B,yBAAKD,UAAU,QAAQO,IAAKY,IAAOT,IAAI,UAEvC,yBAAKV,UAAU,gBAAgBC,GAAG,iBAAlC,qKCNC,SAASmB,EAAWC,GACzB,OACE,yBAAKrB,UAAU,aACb,yBAAKA,UAAU,yBAAyBqB,EAAMC,WCErC,SAASC,IACtB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACJ,EAAD,KACE,kBAACzB,EAAD,MACA,kBAACqB,EAAD,MACA,kBAACE,EAAD,QCDYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACT,EAAD,OAEFU,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b2284d06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7857cab8.png\";","module.exports = __webpack_public_path__ + \"static/media/gooey.fbc6997a.png\";","import React from 'react';\r\nimport logo from '../img/logo.png';\r\n\r\nexport function Navbar() {\r\n  let icon = React.createRef();\r\n  let topnav = React.createRef();\r\n\r\n  function NavBarResponsive() {\r\n    var classname = topnav.current.className;\r\n\r\n    if (classname === 'topnav') {\r\n      topnav.current.className += ' showmenu';\r\n    } else {\r\n      topnav.current.className = 'topnav';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='topnav' id='myTopnav' ref={topnav}>\r\n      <a href='/' className='active'>\r\n        Home\r\n      </a>\r\n      <a href='/'>Link 1</a>\r\n      <a href='/'>Link 2</a>\r\n      <a href='/'>About</a>\r\n      <a href='/' style={{ margin: '0', padding: '0' }}>\r\n        <img\r\n          src={logo}\r\n          style={{ maxWidth: '220px', padding: '0', margin: '0' }}\r\n          alt='logo'\r\n        ></img>\r\n      </a>\r\n\r\n      <a className='icon' ref={icon} onClick={NavBarResponsive}>\r\n        <div>\r\n          <b>|||</b>\r\n        </div>\r\n      </a>\r\n      <a\r\n        href='/'\r\n        style={{ float: 'right', background: '#fff', color: '#000000' }}\r\n      >\r\n        Start Journey\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport function UserMessageSection() {\r\n  return (\r\n    <div id='user-message-section'>\r\n      <p style={{ color: '#fff', fontSize: '200%' }}>\r\n        User image and scrollable chat content will be here..........\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport gooey from '../img/gooey.png';\r\n\r\nexport function BottomNavbar() {\r\n  return (\r\n    <div className='bottom-nav' id='bottom-nav'>\r\n      <img className='gooey' src={gooey} alt='Gooey'></img>\r\n\r\n      <div className='gooey-message' id='Gooey-Message'>\r\n        Hey there, I am gooey! Welcome to Moving Blocks Tutorial Journey! I will\r\n        be guiding you through this Journey to know Moving Blocks & Terasology\r\n        better_______ :)\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport function Background(props) {\r\n  return (\r\n    <div className='cover-img'>\r\n      <div className='container pruple-tint'>{props.children}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './styles/index.css';\r\nimport { Navbar } from './components/Navbar';\r\nimport { UserMessageSection } from './components/UserMessageSection';\r\nimport { BottomNavbar } from './components/BottomNavbar';\r\nimport { Background } from './components/Background';\r\n\r\nexport default function App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Background>\r\n        <Navbar />\r\n        <UserMessageSection />\r\n        <BottomNavbar />\r\n      </Background>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}